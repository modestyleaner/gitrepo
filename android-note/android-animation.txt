android animation: 

------------------------------------------------------------
View 动画 
tween animation: alpha ,translate, rotate,scale 

  ---- class : Animation | AnimationUtils
               AlphaAnimation | RotateAnimation | TranslateAnimation | ScaleAnimation                
  ---- xml:  res/anim 

			xml property : android:interpolator= @android:anim/accelerate_decelerate_interpolator(default)
										 android:shareInterpolator=[true|false]
										 
										 android:duration
										 android:fillAfter="true|false"  //true ： 动画结束后，停留在当前位置   false： 反之 
										 
			how to use ;
			  Animation anim = AnimationUtils.loadAnimation(context,R.anim.animation_test);
			  btn.startAnimation(anim);
			  
			Interface:  AnimationListener --> onAnimationStart | onAnimationEnd | onAnimationRepeat 
			
			自定义动画： 
				1  继承 Animation 
				2 实现  initialize() 和 applyTransformation() 方法
				
			
------------------------------------------------------------
   
frame animation :
  --- class :  AnimationDrawable 
   
    how to use : AnimationDrawable ad = (AnimationDrawable)mContext.getResource().getDrawable(R.drawabel.frame_animat);
	  						
	  						btn.setBackgroundResource(R.drawable.frame_animation);
	  						AnimationDrawable drawable = btn.getBackground();
	  						drawable.start();
	  						
	  						
	  xml： /res/drawable/animation-drawable-test.xml
	  <animation-list ></animation-list>
	  
		注意: 帧动画 如果图片过大 ，容易引起OOM 	  
------------------------------------------------------------

property animation :
   
   android3.0 api level : 11  --->  nineoldandroids lib 
   
   TimeInterpolator  |  TypeEvaluator

   ValueAnimator | ObjectAnimator | AnimatorSet 
   
   xml 中使用属性动画：
    /res/animator/xxxx.xml
    
    <set >
    		<objectAnimator> </objectAnimator>
    		<Animator></Animator>
    		<set></set>
    </set>

   
   动画监听器：AnimatorUpdateListener | AnimatorListener 
   AnimatorUpdateListener : onAnimationUpdate(ValueAnimator animator);
   
  注意：1   要做动画的view必须保证有其属性对应的get 和 set方法，否则可能出现crash。 
    2   对于没有 set和get方法的解决方案：
    	2.1   给你的对象加上get和set方法
    	2.2  用一个类包装原始对象，简介为其提供get和set方法
    	2.3 采用valueAnimator，监听动画过程，自己实现属性的改变
    	
    	 
    
 -------------------------------------------------------------------------
 View动画的特殊使用场景：
 
  1 在ViewGroup中控制子元素的出场效果     api：19
  	 LayoutAnimation  :  
  	 								   属性：  android:delay | android:animationOrder :normal,reverse ,random 
     
     LayoutAnimationController controller = new LayoutAnimationControlelr(animation);
     listview.setLayoutAnimation(controller)  	 		
     
     						 
  2 在Activity中实现不同Activity的入场效果
  	
  	  在startActivity | finish 后调用overridePendingTransition(enterAnim,exitAnim);
  	  
  	 Fragment 添加切换动画：  FragmentTransaction 中的setCustomAnimations();  
  	 
 --------------------------------------------------------------------------------
 	通过硬件层提高Android动画的性能：
 	
 	 用法：    View.setLayerType();
 	   1 为每一个需要在动画过程中需要缓存的view设置setLayerType(View.LAYER_TYPE_HARDWARE,null);
 	   2 运行动画
 	   3 动画结束，通过view.setLayerType(View.LAYER_TYPE_NONE,null);
 	   
 	   /************************************************************
 	    * 
 	    // Set the layer type to hardware 
			myView.setLayerType(View.LAYER_TYPE_HARDWARE, null);
			
			// Setup the animation
			ObjectAnimator animator = ObjectAnimator.ofFloat(myView, View.TRANSLATION_X, 150);
			
			// Add a listener that does cleanup 
			animator.addListener(new AnimatorListenerAdapter() {  
			  @Override
			  public void onAnimationEnd(Animator animation) {
			    myView.setLayerType(View.LAYER_TYPE_NONE, null);
			  }
			});
			// Start the animation
			animator.start();  
 	    
 	    *****************************************************************/
 
 
 
 -------------------------------------------------------------------------------
   使用动画注意事项：
   1 硬件加速： 
       	可以在不同的级别上进行硬件加速：
       	1.1 应用层 ： <application android:hardwareAccelerated="true" />
       	1.2 activity 层 : <activity android:hardwareAccelerated="true" />
       	1.3 Window 层： getWindow。setFlags(WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED,WindowManager.LayoutParams.FLAG_
       	              HARDWARE_ACCELERATED);
       	1.4 View层 ： View.setLayerType(View.LAYER_TYPE_SOFTWARE,null);
       	
       	
       	在这四个层次中，应用和Activity是可以选择的，Window只能打开，View只能关闭。
    		在apk的AndroidManifest中，如果指定了minSDKVersion&targetSDKVersion=7，会使得应用无法使用硬件加速进行绘图。
    		
  2 兼容性问题： api 11 andorid3.0 之前不可以使用属性动画，可以使用第三方库： nineoldandorids。jar
  3 OOM问题： frame animation 大图片容易出现OOM
  4 内存泄露： 对于属性动画中的无线循环动画，需要在activity退出时，及时停止，否则activity无法释放造成内存泄露
  5 View动画的问题： 并未真正改变View的状态，因此有时会出现动画完成后无法隐藏的现象。 需要先调用 view.clearAnimation(),清楚动画。
  
  
  参考文档：  
      1 nineoldandroids: https://github.com/JakeWharton/NineOldAndroids 
      2 csdn地址： http://blog.csdn.net/singwhatiwanna/article/details/17841165
      3 手动实现布局动画transitions ： https://github.com/bboyfeiyu/android-tech-frontier/blob/master/issue-16/%E6%89%8B%E5%8A%A8%E5%AE%9E%E7%8E%B0%E5%B8%83%E5%B1%80Transitions%E5%8A%A8%E7%94%BB-%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86.md 
      4 硬件加速使用： https://github.com/bboyfeiyu/android-tech-frontier/blob/master/issue-30/%E9%80%9A%E8%BF%87%E7%A1%AC%E4%BB%B6%E5%B1%82%E6%8F%90%E9%AB%98Android%E5%8A%A8%E7%94%BB%E7%9A%84%E6%80%A7%E8%83%BD.md
  	 
    
   
